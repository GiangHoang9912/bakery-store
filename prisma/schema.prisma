// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemConfigs {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  fullname  String?
  phone     String?
  password  String
  email     String   @unique
  role      Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  orders    Orders[]

  @@map("user")
}

model Orders {
  id           Int            @id @default(autoincrement())
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  receiverId   Int
  receiver     Receivers      @relation(fields: [receiverId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderDetails OrderDetails[]
}

model Receivers {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  address   String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Orders[]
}

model Products {
  id           Int           @id @default(autoincrement())
  name         String
  price        Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  vouchers     Vouchers[]
  OrderDetails OrderDetails?
}

model OrderDetails {
  id        Int       @id @default(autoincrement())
  orderId   Int
  order     Orders    @relation(fields: [orderId], references: [id])
  productId Int?      @unique
  Products  Products? @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Vouchers {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  discount  Float
  productId Int?
  product   Products? @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiredAt DateTime? @default(now())
}

model ContactUs {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
