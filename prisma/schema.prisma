// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemConfigs {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model User {
  id        Int       @id @default(autoincrement())
  fullname  String?
  phone     String?
  password  String
  email     String    @unique
  role      Int       @default(1)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at")
  orders    Orders[]

  @@map("user")
}

model Orders {
  id           Int            @id @default(autoincrement())
  userId       Int            @map("user_id")
  user         User           @relation(fields: [userId], references: [id])
  receiverId   Int            @map("receiver_id")
  status       String         @default("pending")
  receiver     Receivers      @relation(fields: [receiverId], references: [id])
  createdAt    DateTime?      @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  orderDetails OrderDetails[]

  @@map("orders")
}

model Receivers {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String
  address   String
  email     String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  Orders    Orders[]

  @@map("receivers")
}

model Products {
  id           Int           @id @default(autoincrement())
  name         String
  price        Float
  vouchers     Vouchers[]
  image        String?
  OrderDetails OrderDetails?
  createdAt    DateTime?     @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")

  @@map("products")
}

model OrderDetails {
  id        Int       @id @default(autoincrement())
  orderId   Int       @map("order_id")
  order     Orders    @relation(fields: [orderId], references: [id])
  productId Int?      @unique @map("product_id")
  Products  Products? @relation(fields: [productId], references: [id])
  quantity  Int       @default(1)
  price     Float
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("order_details")
}

model Vouchers {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  discount  Float
  productId Int?      @map("product_id")
  product   Products? @relation(fields: [productId], references: [id])
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  expiredAt DateTime? @default(now()) @map("expired_at")

  @@map("vouchers")
}

model ContactUs {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String?
  phone     String?
  note      String?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("contact_us")
}
